/* 
 *  Copyright (C) 2000 - 2008 TagServlet Ltd
 *
 *  This file is part of Open BlueDragon (OpenBD) CFML Server Engine.
 *  
 *  OpenBD is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  Free Software Foundation,version 3.
 *  
 *  OpenBD is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with OpenBD.  If not, see http://www.gnu.org/licenses/
 *  
 *  Additional permission under GNU GPL version 3 section 7
 *  
 *  If you modify this Program, or any covered work, by linking or combining 
 *  it with any of the JARS listed in the README.txt (or a modified version of 
 *  (that library), containing parts covered by the terms of that JAR, the 
 *  licensors of this Program grant you additional permission to convey the 
 *  resulting work. 
 *  README.txt @ http://www.openbluedragon.org/license/README.txt
 *  
 *  http://www.openbluedragon.org/
 */

/* Generated By:JavaCC: Do not edit this line. selectSQLParserTokenManager.java */
package com.naryx.tagfusion.cfm.queryofqueries;

public class selectSQLParserTokenManager implements selectSQLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10080L) != 0L || (active1 & 0x7f00000000000L) != 0L)
         {
            jjmatchedKind = 238;
            return 16;
         }
         if ((active0 & 0xfffffffffffe7f40L) != 0L || (active1 & 0xfff80fffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x7fffe000ffL) != 0L)
         {
            jjmatchedKind = 238;
            return 19;
         }
         if ((active4 & 0x8L) != 0L)
            return 1;
         if ((active0 & 0x8000L) != 0L || (active3 & 0x1fff00L) != 0L)
         {
            jjmatchedKind = 238;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active0 & 0x8000L) != 0L || (active3 & 0x1f0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 1;
            }
            return 11;
         }
         if ((active0 & 0xfffff3fddff819c0L) != 0L || (active1 & 0x79fffffffffffffL) != 0L || (active2 & 0xffffffff1dffff80L) != 0L || (active3 & 0x7fffe07fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 1;
            }
            return 19;
         }
         if ((active0 & 0xc0220066600L) != 0L || (active1 & 0xf860000000000000L) != 0L || (active2 & 0xe200007fL) != 0L || (active3 & 0x8000L) != 0L)
            return 19;
         return -1;
      case 2:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 2;
            }
            return 14;
         }
         if ((active0 & 0xffff349dcf001bc0L) != 0L || (active1 & 0xffd67ff3ffc5ffffL) != 0L || (active2 & 0xbfffffdf9dfdfec1L) != 0L || (active3 & 0x7fffff7fc3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 2;
            }
            return 19;
         }
         if ((active0 & 0xc36030f82000L) != 0L || (active1 & 0x9800c003a0000L) != 0L || (active2 & 0x400000200002013eL) != 0L || (active3 & 0x3cL) != 0L)
            return 19;
         return -1;
      case 3:
         if ((active0 & 0xfc26b4dc87001b40L) != 0L || (active1 & 0xfe937e70f3f4ffffL) != 0L || (active2 & 0xbefcffde18ffea5dL) != 0L || (active3 & 0x107def03faL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 3;
            }
            return 19;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 3;
            }
            return 32;
         }
         if ((active0 & 0x3d9000148008080L) != 0L || (active1 & 0x14401830c010000L) != 0L || (active2 & 0x1030001850014a0L) != 0L || (active3 & 0x6f82107c01L) != 0L)
            return 19;
         return -1;
      case 4:
         if ((active0 & 0xf3a6945886001040L) != 0L || (active1 & 0x9e110f70fff4fdffL) != 0L || (active2 & 0xbebcefda1c660a5dL) != 0L || (active3 & 0x2606f72f8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 4;
            }
            return 19;
         }
         if ((active0 & 0xc00208401010b00L) != 0L || (active1 & 0x6082700000000200L) != 0L || (active2 & 0x4010040099e000L) != 0L || (active3 & 0x101d800102L) != 0L)
            return 19;
         return -1;
      case 5:
         if ((active0 & 0x73a6944886000000L) != 0L || (active1 & 0x9e010d003df47cfeL) != 0L || (active2 & 0xb09c6fd018600a5cL) != 0L || (active3 & 0x2600f72f8L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 5;
            }
            return 19;
         }
         if ((active0 & 0x8000001000001040L) != 0L || (active1 & 0x100270c2008101L) != 0L || (active2 & 0xe20800a04060001L) != 0L || (active3 & 0x10600000L) != 0L)
            return 19;
         return -1;
      case 6:
         if ((active0 & 0x5380944802000000L) != 0L || (active1 & 0x9e0004403d8400b8L) != 0L || (active2 & 0xa09c659010200258L) != 0L || (active3 & 0x2000f72f0L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 6;
            }
            return 19;
         }
         if ((active0 & 0x2026000084000000L) != 0L || (active1 & 0x1090000707c46L) != 0L || (active2 & 0x10000a4008400804L) != 0L || (active3 & 0x60000008L) != 0L)
            return 19;
         return -1;
      case 7:
         if ((active0 & 0x4380940000000000L) != 0L || (active1 & 0x9c0000403884789cL) != 0L || (active2 & 0x2004610010000048L) != 0L || (active3 & 0xe72c0L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 7;
            return 19;
         }
         if ((active0 & 0x1004004802000000L) != 0L || (active1 & 0x200040005000020L) != 0L || (active2 & 0x8098049000200210L) != 0L || (active3 & 0x200010030L) != 0L)
            return 19;
         return -1;
      case 8:
         if ((active0 & 0x200900000000000L) != 0L || (active1 & 0x800000003884789cL) != 0L || (active2 & 0x2004200010000000L) != 0L || (active3 & 0xa6080L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 8;
            }
            return 19;
         }
         if ((active0 & 0x4180040000000000L) != 0L || (active1 & 0x1c00004000000000L) != 0L || (active2 & 0x410000000048L) != 0L || (active3 & 0x41240L) != 0L)
            return 19;
         return -1;
      case 9:
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x2884001cL) != 0L || (active2 & 0x4200000000000L) != 0L)
            return 19;
         if ((active0 & 0x300100000000000L) != 0L || (active1 & 0x8000000010007880L) != 0L || (active2 & 0x2000000010000000L) != 0L || (active3 & 0xa6080L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 9;
            }
            return 19;
         }
         return -1;
      case 10:
         if ((active0 & 0x100100000000000L) != 0L || (active1 & 0x7880L) != 0L || (active2 & 0x2000000010000000L) != 0L || (active3 & 0x6000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 10;
            return 19;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x8000000010000010L) != 0L || (active3 & 0xa0080L) != 0L)
            return 19;
         return -1;
      case 11:
         if ((active0 & 0x100100000000000L) != 0L || (active1 & 0x80L) != 0L || (active3 & 0x6000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 11;
            }
            return 19;
         }
         if ((active1 & 0x7800L) != 0L || (active2 & 0x2000000010000000L) != 0L)
            return 19;
         return -1;
      case 12:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L || (active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 12;
            return 19;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x80L) != 0L || (active3 & 0x2000L) != 0L)
            return 19;
         return -1;
      case 13:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L || (active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 13;
            return 19;
         }
         return -1;
      case 14:
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 14;
            return 19;
         }
         if ((active3 & 0x4000L) != 0L)
            return 19;
         return -1;
      case 15:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 15;
            return 19;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 19;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
	   return pos + 1;
   }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L);
      case 40:
         return jjStopAtPos(0, 241);
      case 41:
         return jjStopAtPos(0, 242);
      case 42:
         return jjStopAtPos(0, 252);
      case 43:
         return jjStopAtPos(0, 260);
      case 44:
         return jjStopAtPos(0, 249);
      case 45:
         return jjStopAtPos(0, 261);
      case 46:
         return jjStartNfaWithStates_0(0, 259, 1);
      case 47:
         return jjStopAtPos(0, 262);
      case 58:
         return jjStopAtPos(0, 248);
      case 59:
         return jjStopAtPos(0, 247);
      case 60:
         jjmatchedKind = 256;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x2L);
      case 61:
         return jjStopAtPos(0, 251);
      case 62:
         jjmatchedKind = 255;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 250);
      case 91:
         return jjStopAtPos(0, 245);
      case 92:
         return jjStopAtPos(0, 263);
      case 93:
         return jjStopAtPos(0, 246);
      case 94:
         return jjStopAtPos(0, 264);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1ff8301a0000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1e00004000400L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfffe000001000000L, 0xffffL, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x42000000L, 0x1ffff0000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffe00000000L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10080L, 0x7f00000000000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800L, 0xf8000000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x100000000000000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200004000L, 0xfe00000000000000L, 0x7fL, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0xfe00L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L, 0xf0000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100002000L, 0x0L, 0xff00000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40200L, 0x0L, 0x1ff0000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff000000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200040L, 0x0L, 0xfe00000000000000L, 0xffL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L, 0x1fff00L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x480000000L, 0x0L, 0x0L, 0x7e00000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x1f00000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 243);
      case 125:
         return jjStopAtPos(0, 244);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
	if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         else if ((active4 & 0x4L) != 0L)
            return jjStopAtPos(1, 258);
         break;
      case 62:
         if ((active4 & 0x2L) != 0L)
            return jjStopAtPos(1, 257);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e000000811000L, active1, 0x30000L, active2, 0x6000710600L, active3, 0x78000100L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0x600000010800000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x200000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200044000040L, active1, 0x810000ffc0000L, active2, 0x783f000001003900L, active3, 0x2000000200L, active4, 0L);
      case 70:
      case 102:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 157, 19);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0000000000100L, active1, 0L, active2, 0L, active3, 0x300000400L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000a400000L, active1, 0x200030000000L, active2, 0x40000000020000L, active3, 0x480007800L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000c010000000L, active1, 0x10400200000000L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10480080000L, active1, 0xf800000c00000000L, active2, 0x8000003fL, active3, 0x200000L, active4, 0L);
      case 79:
      case 111:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 207, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0xf001000001002000L, active1, 0x1438000c00000ffL, active2, 0x1800080000cc080L, active3, 0x4800000001L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x300000000L, active3, 0xc00002L, active4, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3cL, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000008a80L, active1, 0x80000100000300L, active2, 0x7f0000000000L, active3, 0x10001f0000L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40020000000L, active1, 0x1000000000L, active2, 0x40L, active3, 0x7000000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 19);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100200000L, active1, 0x400000000fc00L, active2, 0x800c0c000000L, active3, 0x40L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfe000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 19);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4); 
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x13c0000000000000L, active1, 0x80000010040000L, active2, 0x8003000000000800L, active3, 0x20010f0002L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0x140L);
      case 67:
      case 99:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 19);
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000300000L, active2, 0x1800000000004000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 19);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 19);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 165, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x800000800000000L, active2, 0x40000L, active3, 0x400000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000100L, active1, 0x200018000000100L, active2, 0x71100000000L, active3, 0x382000400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c00000L, active2, 0x4000000001000L, active3, 0L);
      case 71:
      case 103:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000800000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x1000020000000000L, active2, 0x380000000080L, active3, 0x1004300000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x88000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xe000004100010040L, active1, 0x4000002000000L, active2, 0x88000084000000L, active3, 0x18000038L);
      case 77:
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000040000001L, active2, 0x8100000L, active3, 0x7a01L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000007eL, active2, 0xa0200L, active3, 0x4000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000880L, active1, 0x10400100000200L, active2, 0x400000000040L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0x800000L);
      case 82:
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x120000000fc80L, active2, 0x400004000000000L, active3, 0x860000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e040842000000L, active1, 0x800000022c000000L, active2, 0x2010008000000401L, active3, 0x80L);
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 19);
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 19);
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 190, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0x21909004000000L, active1, 0x401c0000010000L, active2, 0xe1061003cL, active3, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000L, active1, 0x102000080000000L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L, active2, 0x20000000002000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000008000L, active3, 0L);
      case 88:
      case 120:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 19);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 19);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 19);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 136, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x401040400100L, active2, 0x8000000804000L, active3, 0x400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000080000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x406000000000000L, active1, 0x11002c000000L, active2, 0x410000010000L, active3, 0x2000000aL);
      case 68:
      case 100:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 176, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 19);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 19);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 19);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 19);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 19);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 19);
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 230, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x48000000240L, active1, 0xa401046003800000L, active2, 0x20400041810a01dL, active3, 0x807010L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L, active2, 0x200L, active3, 0x1000000L);
      case 72:
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 19);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 226, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x201000001000L, active1, 0x800000000100000L, active2, 0x8200200000L, active3, 0x10000L);
      case 75:
      case 107:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 227, 19);
         break;
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 19);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 177, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x7000000000000000L, active1, 0x240000L, active2, 0x8080800004000040L, active3, 0x100L);
      case 77:
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 19);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 212, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0x80000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 19);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 19);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 202, 19);
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x81000000L, active1, 0x282000000000006L, active2, 0L, active3, 0x2040e0000L);
      case 79:
      case 111:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 19);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x4c00000000L, active1, 0L, active2, 0xc20100000000000L, active3, 0L);
      case 80:
      case 112:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20800000000L, active3, 0x200L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 19);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 217, 19);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 229, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x380000000000100L, active1, 0x80000007c80L, active2, 0x1000000000L, active3, 0L);
      case 83:
      case 115:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 184, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000010000L, active1, 0x220000008218L, active2, 0x2000040000000000L, active3, 0x60L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 19);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 19);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 19);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x1000000000000020L, active2, 0x1010004000080000L, active3, 0x1000000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000800L, active1, 0x4000000000000000L, active2, 0x460000L, active3, 0x18000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0x200000000000L, active3, 0L);
      case 87:
      case 119:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 19);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x6186000000000000L, active1, 0x10080000200000L, active2, 0xa0000000040L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000040L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 19);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 19);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 19);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 19);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 19);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 216, 19);
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 228, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000004000000L, active1, 0x800007cc6L, active2, 0x440000000000L, active3, 0x210000080L);
      case 71:
      case 103:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 218, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L);
      case 72:
      case 104:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 19);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 144, 19);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 147, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0x1001000040000021L, active2, 0x3000a14004000800L, active3, 0x40000000L);
      case 75:
      case 107:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 76:
      case 108:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 19);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 142, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x20800800000000L, active1, 0x80040000L, active2, 0x8400001000040000L, active3, 0x10000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x100000L, active2, 0x200000000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 19);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x8000000010000000L, active2, 0x800000000000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x101080000000L, active1, 0x20008000L, active2, 0x200200000L, active3, 0x208L);
      case 80:
      case 112:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x7000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 19);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 19);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 19);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 19);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 151, 19);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 162, 19);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 19);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 215, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x4000d800000L, active2, 0x14000008400019L, active3, 0x10L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 19);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe1000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 19);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 19);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 19);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 19);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 19);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200020002000118L, active2, 0x8008010020000L, active3, 0x400060L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000400000L, active2, 0x800000200L, active3, 0x200000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 65:
      case 97:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 185, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x1800000000100000L, active2, 0x80005000400200L, active3, 0x20020020L);
      case 67:
      case 99:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0x80000000006L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 187, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000L, active1, 0L, active2, 0x400000000000L, active3, 0x8L);
      case 69:
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 19);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 19);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 19);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 19);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 19);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 146, 19);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 181, 19);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 213, 19);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x800004000000L, active1, 0L, active2, 0x4000000000004L, active3, 0L);
      case 70:
      case 102:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 19);
         break;
      case 71:
      case 103:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60000000c000000L, active2, 0x8018008008000000L, active3, 0x10000L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 19);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 186, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x400000L, active2, 0x200000000000L, active3, 0xc0000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 19);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 19);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 19);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x40020007c20L, active2, 0x200800L, active3, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x10040000L, active2, 0x3000000000000000L, active3, 0x6000L);
      case 82:
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x1a00058L, active2, 0xe0000000000L, active3, 0x250L);
      case 83:
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 19);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 220, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x8000000000000080L, active2, 0x10000000008L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 19);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 19);
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 19);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 163, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x6000040000000000L, active1, 0x14000000000L, active2, 0x40L, active3, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0x200000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400040000800018L, active2, 0x200010L, active3, 0xc1200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 155, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000002000000L, active1, 0x40000L, active2, 0x90000000000000L, active3, 0x20000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 19);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 19);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 19);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 19);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 195, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000000000L, active1, 0x801000000L, active2, 0x200000000008L, active3, 0x200000000L);
      case 71:
      case 103:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 19);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 19);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 222, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000140000000000L, active1, 0x8000004000000000L, active2, 0x10000000040L, active3, 0x40L);
      case 76:
      case 108:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 19);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 150, 19);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 166, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x10000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 19);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 19);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 112, 19);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x20000000L, active2, 0xa004000000000000L, active3, 0x16000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000080L, active2, 0x1000000000L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 19);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 221, 19);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 19);
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 19);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0x180004800000000L, active1, 0xa00000000007804L, active2, 0L, active3, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0x400000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8040000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x7800L, active2, 0x2000000000000000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 99);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000008L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 19);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 19);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 19);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 19);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 19);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 19);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 19);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 137, 19);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 170, 19);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 179, 19);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 197, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000000L, active1, 0x20000000L, active2, 0x10000000L, active3, 0x6000L);
      case 71:
      case 103:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 208, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1cL, active2, 0L, active3, 0L);
      case 75:
      case 107:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 183, 19);
         break;
      case 76:
      case 108:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 19);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 19);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 149, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000L);
      case 78:
      case 110:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 167, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000040000000000L, active1, 0x800004000000080L, active2, 0x10000000040L, active3, 0L);
      case 82:
      case 114:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 19);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 225, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0x200L);
      case 83:
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 164, 19);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 19);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 19);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 191, 19);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8400000018000000L, active2, 0L, active3, 0xe0000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 89:
      case 121:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 19);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 19);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 19);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 210, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4200000000000L, active3, 0L);
      case 71:
      case 103:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 198, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000010000000L, active2, 0L, active3, 0xa0000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 19);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 19);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 19);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 134, 19);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 168, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x98L, active2, 0x10000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000004L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 204, 19);
         break;
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 84:
      case 116:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 19);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0x43000L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L, active2, 0x2000000000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 124, 19);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 201, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 82, 19);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 72:
      case 104:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 78:
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 66, 19);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xa0000L);
      case 82:
      case 114:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 91, 19);
         break;
      case 83:
      case 115:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 173, 19);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 178, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L, active2, 0x2000000000000000L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 19);
         return jjMoveStringLiteralDfa10_0(active0, 0x200100000000000L, active1, 0x10L, active2, 0L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 127, 19);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L, active2, 0x2000000000000000L, active3, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 57, 19);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0x80L, active2, 0L, active3, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 209, 19);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 211, 19);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 82:
      case 114:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 199, 19);
         break;
      case 83:
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 68, 19);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 92, 19);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L, active2, 0x10000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 75, 19);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(11, 156, 19);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(11, 78, 19);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 189, 19);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 71, 19);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 44, 19);
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 205, 19);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active1, 0L, active3, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L, active3, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000L, active3, 0L);
      case 69:
      case 101:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(14, 206, 19);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 56, 19);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1, 0L, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1, 0L, 0L, 0L);
   
   if ( ( curChar = input_stream.readChar() ) == 0 ) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(16, 77, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 231)
                        kind = 231;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(4);
                  break;
               case 5:
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 8:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 39 && kind > 235)
                     kind = 235;
                  break;
               case 18:
                  if (curChar != 36)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAddStates(0, 4);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar != 46)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                     jjCheckNAdd(19);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 237)
                        kind = 237;
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 6:
                  jjAddStates(5, 7);
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L && kind > 237)
                     kind = 237;
                  break;
               case 13:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 19:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 12:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 11:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 238)
                     kind = 238;
                  jjCheckNAdd(19);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      
      if ( ( curChar = input_stream.readChar() ) == 0 )
    	  return curPos;
   }
}
static final int[] jjnextStates = {
   21, 22, 23, 28, 29, 6, 8, 9, 3, 4, 26, 27, 30, 31, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", 
"\54", "\77", "\75", "\52", "\74\75", "\76\75", "\76", "\74", "\74\76", "\41\75", 
"\56", "\53", "\55", "\57", "\134", "\136", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffe6affffffffffL, 
   0x1ffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[32];
private final int[] jjstateSet = new int[64];
protected char curChar;
public selectSQLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public selectSQLParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   if ( ( curChar = input_stream.BeginToken() ) == 0 ) {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   input_stream.backup(0);
   while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L) {
      if ( ( curChar = input_stream.BeginToken() ) == 0 )
         continue EOFLoop;
   }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   if ( input_stream.readChar() == 0 ) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else {
         error_column++;
      }
   } else {
	   input_stream.backup(1);
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
